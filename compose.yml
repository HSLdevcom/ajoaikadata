services:

  ajoaikadata:
    build: .
    environment:
      - BYTEWAX_PYTHON_FILE_PATH=app.ajoaikadata
      - BYTEWAX_PYTHON_PARAMETERS=-w ${BYTEWAX_WORKER_COUNT}
      - BYTEWAX_DATAFLOW_API_ENABLED=true
      - BYTEWAX_BATCH_SIZE=${BYTEWAX_BATCH_SIZE}
      - AZ_STORAGE_CONNECTION_STRING=${AZ_STORAGE_CONNECTION_STRING}
      - AZ_STORAGE_CONTAINER=${AZ_STORAGE_CONTAINER}
      - START_DATE=${START_DATE}
      - END_DATE=${END_DATE}
      - POSTGRES_CONN_STR=${POSTGRES_CONN_STR}
      - BALISE_DATA_FILE=/bytewax/app/util/balise_registry.csv
    ports:
      - 3030:3030
    volumes:
      - ./src:/bytewax/app
      - ./data:/data
    depends_on:
      db:
        condition: service_healthy

  db:
    image: "timescale/timescaledb-ha:pg15.4-ts2.11.2-all"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    volumes:
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./monitoring/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./monitoring/grafana/monitoring.json:/var/lib/grafana/dashboards/monitoring.json
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
